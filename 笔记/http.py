"""
GET: 请求资源
    请求服务器的一个资源，如果是一个html文本，就返回整个html，如果是一个程序之类的就返回程序运行的结果
POST: 传输实体
    一般都是发送一些东西到服务器，让服务器进行操作比如表单之类的
HEAD: 获取报文首部
PUT: 上传文件
PATCH: 对资源进行部分修改
DELETE: 删除资源
OPTIONS: 查询指定url支持的方法
CONNECT: 要求在与代理服务器通信时建立隧道
TRACE: 追踪路径
"""
"""
状态码
100 表示到目前为止都很正常

200 成功
204 请求成功处理但是没有可以返回的数据
206 请求了一部分的数据成功

301 永久重定向
302 临时性重定向
303 表示该网页上还有另外的资源是不是要用GET来请求一下
304 不满足一些条件可能会出现的情况
307 临时重定向

400 请求报文中出现语法错误
401 发送的请求需要身份验证 如果上次请求是验证那么就说明用户的认证失败
403 请求被拒绝
404 根本没有这个东西

500 服务器出现了问题
503 服务器超负载或者正在维护

Connection: keep-alive
用于范围接收
Range: bytes=5001-10000
请求
表示客户端这边可以接收的格式比如html
Accept:
表示请求的url的值  可以防止出现跨站脚本攻击
Referer


cookie
服务器在响应的时候会带上
HTTP/1.1 200 OK
Content-Type: text/html
Set-Cookie: wang=345
浏览器在接收到这种响应的时候下次的请求就会带上cookie
GET /code.html HTTP/1.1
Host: www.codelink.net
Cookie: wang=345
cookie 有两种状态
    一种是等浏览器关闭cookie自动清空
    另一种是设计过期时间
Session
其实就是加密的cookie使用session来代替cookie可以防止敏感信息泄露

cookie只能储存ASCll码 Session可以储存所有类型的数据
可以将cookie进行加密到服务器进行解密
所有的session都用服务器来进行储存的话对服务器是一个比较大的开销

缓存
用来减少服务器的压力，也能让让用户获取信息的更加快速减少获取资源的延迟
使用代理服务器或者浏览器进行缓存

虚拟主机
一台服务器可以挂载多个域名，可以看成是多台服务器

代理
正向代理
    服务器不知道是谁在访问，客户端的请求全部由代理服务器来进行
反向代理
    客户端换在进行访问的时候不直接访问服务器，先访问负载均衡服务器，然后再由负载均衡服务器转发到空闲的
    服务器，空闲服务器将处理返回给负载均衡服务器，然后通过负载均衡服务器传回响应给客户端
"""
"""
HTTPS
是一个加密算法
首先将你的私匙和数字签名通过
首先要信任一个服务器，由服务器将一个服务器的私匙发送给你，然后你将你自身的公匙通过哈希算法生成一个摘要
然后用服务器的私匙来对摘要进行加密 简称数字签名
发送一个包含数字签名和你自己的公匙的东西传送给对方 简称数字证书 
当我得到数字证书的时候将数字证书中的对方公匙通过哈希算法形成消息摘要然后用用服务器私匙进行加密
对照接收的数字签名 如果相同则证明没有受到攻击 这样加密的交换了对称加密的公匙 之后就可以进行加密传输了

正式细节
    浏览器发送安全请求
    接收服务器发送的数字证书 包含服务器公匙
    浏览器通过CA的列表验证证书，如果有问题就提示风险
    浏览器发送随机生成的对称密匙用服务器发来的公匙进行加密
    发送给服务器 服务器将发送来的数据通过服务器私匙进行解密
    双方得到对称密匙进行加密通信。
    
中间人劫持
    我们通过双方的公匙进行加密，互相加密之后传输到各自的位置，然后再通过各自的私匙进行解密得到数据
    中间人截取双方的公匙
    王 李
    王拿到中间人的公匙加密发送数据
    中间人通过自己的私匙进行解密查看数据，通过李的公匙进行加密这段数据(或者自己编造数据)发送给李
    李收到数据然后使用自己的私匙解密查看数据，在通过中间人公匙进行加密回传
    
    
"""
"""
GET 和 POST的区别
GET 用来获取资源
POST 用来传输实体主题
一般来讲GET的额外数据是加在url上的 url的数据只支持ASCll码所以会转义中文之类的
POST的数据是传输在 body中 POST支持标准字符集所以可以传递很多数据

安全
    只是可读的方法是安全的GET POST传输数据所以可能会产生一些更改所以不是很安全
幂等
    一个同样的请求多次的效果是一样的
    不论调用多少次客户端接收的结果都是一样的

"""
