关键字(keyword)
操作符(operator)
通配符(wildcard)
搜索模式(search pattern)
谓词(predicate)
字段(field)
拼接(concatenate)

	子句		说明			是否必须使用
	SELECT		要返回的列或表达式		是
	FROM		从中检索数据的表		仅在从表中选择数据的时候使用
	WHERE		行集过滤			否
	GROUP BY	分组说明			尽在按组计算聚集时使用
	HAVING		组级过滤			否
	ORDER BY	输出排序顺序		否

子查询就是用()防止硬编码在括号中间也使用SELECT选择出你想要的



联结：
	将不同的表通过相同的列进行连接产生新的组合，在不同的SQL中使用方式会有不同所以具体的话还是去看官方文档
	
	等值联结/内联结：将两个不同的表通过列进行联结
	自联结：同一个表通过别名的方式可以取不同的名字，然后在一个表中加上限定条件筛选需要的值可以联结到你需要的表上来进行数据筛选。
	
	INNER JOIN: 有匹配的值的时候返回行
	LEFT JOIN	：以左表为基准表，返回所有左表行但是如果右表不匹配就返回NULL值
	RIGHT JOIN：和左表相同
	FULL JOIN：不管是否匹配全部返回




表别名：	
	表可以直接使用AS来赋值别名方便使用，与列别名不同的是表别名不能返回客户端，只在查询执行的时候使用

常见的语法：
	select:从一个或者多个表中检索数据。
	         	检索多个列的时候中间加上，作为间隔。
		使用 * 返回所有的列，使用 * 一般不是一个明智的选择过多的不需要的数据也会被检索，这样的话会降低性能。但是有时候可以检索出整个表格让你发现你所不知道名字的列。
		distinct：SELECT DISTINCT XXX  当你的返回的数据中有很多的重复的时候可以使用这个关键词来让数据库只返回不同的值。
		排序：
			SELECT A
			FROM X
			ORDER BY A;
			对A进行排序，这里要注意ORDER BY应当是SELECT 语句中的最后一条子句不然会报错。
			如果你对没有检索的列进行了排序也是很正常的
			相对位置排序：
				SELECT A, B, C
				FROM X
				ORDER BY 2, 3;
				对A, B排序先排序A然后排序B。
				这样好处在于不需要重新输入列名，但是这样使用在更改代码的时候也容易出现问题比如忘记对ORDER BY子句进行更改。
			默认的排序是按照升序排序的，想要进行降序排序可以指定关键字：
				SELECT A
				FROM X
				ORDER BY A DESC;
				将排序方式转换成了降序
				注意：DESC只针对位于其前面的列名，如果你想对多个列进行排序的话你需要为每一列指定DESC关键字。
				DESC: 降序 对应的是ASC：升序。但是一般ASC没有什么用处因为默认是升序。	
		限制语法：当你想返回一定数量的行的时候可以进行限制语法的使用，但是在不同的SQL中限制的方法大有不同,下面来介绍一下。
			SQL Server和Access：使用TOP来限制返回多少行。
				从X表中的A列返回前5行
				SELECT TOP 5 A
				FROM X
			DB2:
				SELECT A
				FROM X
				FETCH FIRST 5 ROWS ONLY;
			Oracle:基于ROWNUM(行计数器)进行计算
				SELECT A
				FROM X
				WHERE ROWNUM <=5
			MySQL,MariaDB,PostgreSQL,SQLite：使用LIMIT
				SELECT A
				FROM B
				LIMIT 5;
			当你限制输出了5行的时候你可能会想输出剩余行的数据，或者你想按照你的想法输出你想要的数据那么可以使用下面的语法：
				SELECT A
				FROM B
				LIMIT 5 OFFSET 5;
				这样返回了从第5行起的5行数据，第一个数据起始行第二个数字是检索的行数。
				MySQL和MariaDB支持简化版本的语句：
					LIMIT 2,4
		创建分组：
			GROUP BY：进行数据分组
				SELECT A COUNT(*) AS B
				FROM C
				GROUP BY A;
				输出：
					A	B
					x	4
					y	5
					z	6
				直接看个例子来进行解释吧 这个例子从C中选择了A 用COUNT(*)创建了一个B
							通过GROUP BY 指示数据库按照A排序并且分组数据这样就只会对每个A进行一次B运算而不是对每个表进行B运算
							假设A是产品名称B是产品数最后返回的就是这个效果
							x有4个产品 y有5个产品 z有6个产品
				GROUP BY必须出现在WHERE子句之后ORDER BY 语句之前
															
		过滤分组：
			HAVING：用来进行过滤分组
			SELECT A, COUNT(*) AS B
			FROM B
			GROUP BY A
			HAVING CONUT(*) >= 2
			我们来假设一下COUNT(*)返回的表：
				x	1
				y	2
				z	1
			这样通过HAVING 这种分组过滤将大于等于2的数据过滤出来
			返回值为：			
				A	B
				y	2
			也可以这么理解其实WHERE是在分组前进行过滤HAVING是在分组后进行过滤WHERE排除的行不在分组中

		搜索语句：
			使用WHERE子句：在数据库的表中有着大量的数据，一般是不需要检索表中的所有行的，当你需要检索指定数据的时候可以选择这条语句
			SELECT A
			FROM B
			WHERE A = 10;
			这样就会返回这一行所有的数值是10的行
			
			操作符：当然下面的操作符只是大致的运算方法在不同的数据库使用的情况下应该参考相应的文档
				=：等于
				<>: 不等于
				!=: 不等于
				<: 小于
				<=: 小于等于
				!: 不小于
				>: 大于
				>=: 大于等于
				!>: 不大于
				BETWEEN: 在指定的两个值之间使用方法：
					WHERE A BETWEEN 5 AND 9
				IS NULL: 为NULL值 使用方法
					WHERE A IS NULL 
				在对字符串进行选择的时候应该加上单引号数值就不需要
			AND和OR:
				使用方法和编程中的实际作用相似，但是要注意的是优先运行AND如果你有什么需要先进行OR的操作需要打上括号来进行操作
				AND:
					WHERE A = 2 AND B = 3
				OR:(当第一个条件满足的时候就直接进行检索了)
					WHERE A = 2 OR A = 3
			IN:
				WHERE A IN(2, 3) 效果和上面的OR是一样的
				一般会选择这个语句来代替OR因为IN更加清楚和直观
			NOT:
				否定所有后面的条件
			LIKE: 通配符操作对数据进行筛选检索
				%:表示任意的字符出现了任意的次数，下面代码的含义就是搜索A内所有以Play开头的字段
				SELECT A
				FROM B
				WHERE A LIKE 'Play%'
				注意：
					在Microsoft Access数据库中使用的是 * 不是 %。 
					这个数据搜索是区分大小写的。%可以匹配多个字符也能匹配 0 个字符。
					空格有可能会产生影响比如 P%y 如果数据库使用空格来填补字段的话就会导致搜索失败。
					对于NULL 这种搜索模式是无效的不会检索出NULL 数据
				_: 下划线只能匹配一个字符其余的和%是相同的
					注意：在Microsoft Access数据库中使用的是 ? 不是 _。空格和上面一样 
				[]:目前只有 Access和SQL Server支持使用集合 当你准备使用它的时候先看看文档是不是支持。
					Access用的是！代替^
					下面是取出以C和K开头的字段
					SELECT A
					FROM B
					WHERE A LIKE '[CK]%';
					下面是取出所有不以C和K开头的字段
					SELECT A
					FROM B
					WHERE A LIKE '[^CK]';
			拼接字段：将两列拼凑起来 + 和 | | 两种方式都可以代表拼接，但是不同的数据库使用方法不同具体使用还要参考文档
				SELECT A + '(' + B + ')'
				FROM C
				就能返回将A B拼凑起来的一列
				SELECT A || '(' || B || ')'
				FROM C
				| | 的方式
			TRIM函数:在你拼接字段的时候可能会出现空格，或者在别的情况下你想要消除空格可以尝试使用这个函数
				RTRIM():去掉右边的空格
				LTRIM():去掉左边的空格
				TRIM:去掉左右的空格
			使用别名：当你拼凑了一个新的列的时候只能够看一看返回的数据不是很好，你没办法引用它们
				SELECT A | | '(' || B || ')' AS D
				FROM C
				这样的话新的一列就会被名成D
			算术运算：你可以在拼接新的一列的时候进行简单的算数运算。

	UNION: 将多个SELECT进行组合，使用方法很简单就是在两个SELECT中间加上一行UNION就行。在不同的SQL中UNION的使用会有不同的限制请查阅文档。
		在进行UNION查询的时候必须包含相同的列、表达式或者是聚集函数。
	UNION ALL: 在UNION中默认将重复的行删除掉了，但是你可以使用这个语句返回所有的行。
	使用排序：当你想用ORDER BY的时候只需要在最后一个SELECT后写就行了
	
	INSERT:数据插入
		指定表名和插入新列的值，某列没值的时候应该输入NULL
		INSERT INTO A B(
				...
				...
				...	
				)
		对应插入A表中B列中的数据，但是直接不推荐这么使用的，一旦迁移或者产生什么变动这样的数据很容易出现错误
	
	安全一点的做法：但是很繁琐
		INSERT INTO A(
				xxx
				yyy
				zzz
				)
		B(
			...
			...
			...
			)
		这种格式给出了每一列的名称
	当表中列的值为NULL或者表中给出了默认值的时候我们可以忽略这个值，在赋值的时候忽略它

函数：这里我们主要还是介绍一下聚集函数，因为在不同的数据库中函数总是不同的一致性很差，但是聚合函数在大多数主要的SQL中得到了一直的支持。
	函数	说明
	AVG()	返回某列的平均值(只能用于单个列，忽略NULL的值)
	COUNT()	返回某列的行数(使用方法可以是COUNT(*)对表中所有的行进行计数包括NULL值。COUNT(A)对A列的行进行计数忽略NULL值)
	MAX()	返回某列的最大值(括号中要放入明确的列名，一般用于数字排序，在用于文本数据时返回该列排序后的最后一行。忽略NULL值)
	MIN()	返回某列的最小值(用法和上面的MAX相同，文本数据时返回第一行)
	SUM()	返回某列之和(忽略NULL)
	
	DISTINCT: 当你只想要不同的值的时候可以使用这个函数来进行筛选，它会自动滤除相同的数值
		SELECT AVG(DISTINCT A) AS C
		FROM B
		会输出所有A列不同值的平均数
		注意：默认的情况是ALL 只有你指定的话才会改成DISTINCT
		          DISTINCT 不能再COUNT(*)的情况使用。 每次使用DISTINCT时必须要指定列名才能，使用无法用于计算和表达式。后面还有不同的聚合参数在不同的SQL中请查阅文档
		

注释：
	-- ：行内注释
	# ：单行注释
	/**/ : 块注释

sql的注意事项：
	SQL语句是不区分大小写的，但是一般将SQL的关键字进行大写，增加可读性方便调试。
	其实在SQL中的空格是完全被忽略的(就是换行与否是不会影响效果的)但是写的太反人类是很难调试的。