"""
负载均衡:
        因为是无状态协议所以用户可以访问到任意的服务器，采用负载均衡就可以通过每个节点
    的负载量将用户的请求转到合适的节点上。

负载均衡算法:
    1.轮询:
        按照请求发送的顺序轮流发给所有的服务器
            比如我发送1 2 3 4 5 6 这六个请求并且我只有两个服务器那么
            135请求发送到服务器1
            246请求发送到服务器2
        缺点
            因为轮询发送的请求对于后台的每个服务器的压力几乎相同，所以如果后台的服务器
            有一个性能很差那样就可能会无法承受负载
    2.加权轮询:
        上面的轮询法的优化过程与上面一致，只是对不同的服务器进行加权，
        服务器1性能很高，服务器2性能很低那么给1加权值为5
        12345请求就会发送到服务器1上
        6请求才会发送到服务器2上
    3.最少连接:
        每个连接持续的时间是不同的，这种情况下使用轮询法进行负载均衡就会产生有些服务器
        连接数过多的情况。(这里当然假设服务器性能几乎一致)
        举例 如同上面的情况 123连接到服务器1， 456连接到服务器2
        假设12连接时间很短很快断开那么继续运行的话
        服务器1没有连接，服务器2有三个连接，导致负载不均衡
        最少连接法是将下一个请求发送到当前连接最少的服务器上的方法
    4.加权最少连接:
        在最少连接的基础上对不同的服务器加权(因为服务器性能不同)来控制不同服务器应该
        有多少的连接数。
    5.随机算法:
        将请求随机发送到不同的服务器上，和轮询法类似，适用于服务器性能相似的情况。
    6.源地址哈希法:
        将ip地址计算哈希值之后再对服务器数量取模得到目标服务器的序号，
        这样可以保证每次该ip都能连接到同一个服务器。
转发实现:
    HTTP重定向:
        请求发送到负载均衡服务器
        使用一种负载均衡算法得到服务器ip之后再从HTTP 302重定向
    DNS负载均衡:
        使用DNS域名解析并且内部使用其余负载均衡
        优点:
            DNS可以返回离用户最近的服务器
        缺点:
            DNS需要一级一级的传递每级都会被缓存所以下线一个服务器或者修改一下记录要很久
            内部的负载均衡还是没变只是增加了一个DNS
    反向代理:
        用户直接访问代理服务器 代理服务器可以用来进行缓存日志记录等情况。
        优点:
            部署简单
        缺点:
            由于所有访问都通过代理服务器所以说可能成为性能瓶颈
session管理:
    1.配置负载均衡器让某个用户的请求都访问固定的服务器这个服务器存储该用户的session
    缺点:
        服务器宕机的话会损失所有的session
    2.让每个服务器都存储所有的session
    缺点:
        占用内存过多，并且同步session很浪费时间
    3.使用单独的服务器来存储session
        缺点:
            需要实现存储session代码

网站攻击:
    跨站脚本攻击 xss:
        在网页上输入html 或者 js 代码网页会自动运行，这样可以攻击网站来进行不好的操作
            窃取用户的 Cookie
            伪造虚假的输入表单骗取个人信息
            显示伪造的文章或者图片
        解决方案转义字符串
    跨站伪造请求 CSRF:
        假如一家银行用以执行转账操作的 URL 地址如下：
            http://www.examplebank.com/withdraw?account=AccoutName&amount=1000&for=PayeeName。
        那么，一个恶意攻击者可以在另一个网站上放置如下代码：
            <img src="http://www.examplebank.com/withdraw?account=Alice&amount=1000&for=Badman">
        这样的话如果用户直接访问了这个页面，并且他在银行页面的cookie还没有过期那么它就会损失
        1000元
        解决方式:
            输入验证码来证明，因为这样是无意识的操作，而输入验证码需要证明
            referer首部来进行校验，这样可以看出该请求来自何处
"""
